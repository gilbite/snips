snippet v
	var_dump($${1});
snippet ret
	return ${1};
snippet die
	die(${1});
snippet try
	try {
		${3://code here...}
	} catch (${1:Exception} $${2:e}){
		${4://code here...}
	}
snippet th
	throw new ${1}Exception('${2}');
snippet thi
	throw new InvalidArgumentException('${1}');
snippet thd
	throw new DomainException('${1}');
snippet thr
	throw new RuntimeException('${1}');
snippet eol
	PHP_EOL
snippet ar
	$${1}->${2}
snippet arr
	$${1}->${2}->${3}
snippet this
	$this->${1}
snippet get
	get${1}(${2})${3}
snippet e
	<?php echo $${1} ?>

snippet provider
	/**
	 * @dataProvider providerTest$1
	 */
	public function test${1:MethodName}(${2})
	{
	}

	public function providerTest$1()
	{
		return [
			[${3}],
		];
	}
snippet acc
	/**
	 * $1 holder
	 * @var $2
	 */
	protected $$1;

	/**
	 * returns $1
	 *
	 * @return ${2:mixed}
	 */
	public function ${1:PropertyName}()
	{
	    return $this->$1;
	}

	/**
	 * sets $1
	 *
	 * @param $2 $$1
	 * @return void
	 */
	public function set${3}$1($$1)
	{
	    $this->$1 = $$1;
	}
snippet ase
	$this->assertEquals(${1:expect}, $${2:object}->${3:method}(${4:arg}));
snippet ass
	$this->assertSame(${1:expect}, $${2:object}->${3:method}(${4:arg}));
snippet asi
	$this->assertInstanceOf('${1:expect}', $${2:object});
snippet ast
	$this->assertTrue($${1:object}->${2:method}(${3:arg}));
snippet asf
	$this->assertFalse($${1:object}->${2:method}(${3:arg}));
snippet asc
	$this->assertCount(${1:expect}, $${2:list});
snippet asn
	$this->assertNull($${1:object});
snippet mock
	$${1:val} = \Mockery::mock('KLab\\Lovelive\\ ${2:class}');
snippet exp
	$${1:mock}->expects($this->${2:any}())->method('${3:method}')->will($this->returnValue(${4}));
snippet mt
	public function test${1:TestName}()
	{
		${2}
	}
snippet ct
	/**
	 * @${1:group} ${2}
	 */
	class ${3:`Filename()`} extends \LoveliveTestCase
	{
		public function testFail()
		{
			$this->fail('hoge');
		}
	}
snippet cdt
	class `Filename()` extends TalesDatabaseTestCase
	{
		public function getDataSet()
		{
			return new PHPUnit_Extensions_Database_DataSet_YamlDataSet($this->getFixtureRoot() . '/unit/${1:path/to/test}/${2:`Filename()`}.yml');
		}
	}
delete fun
snippet fun
	${1:public} function ${2:methodName}(${3:$arg})
	{
		${4:// code here}
	}
snippet php
	<?php
snippet el
	foreach(explode("\n",print_r($${1},true)) as $line){error_log("{OSUGA}::".get_class()."::L".__line__."::".$line);}


